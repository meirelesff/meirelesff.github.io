[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Usando R: Uma Introdução para Cientistas Sociais",
    "section": "",
    "text": "Prefácio\nEste é um manuscrito em desenvolvimento. A medida em que os capítulos forem concluídos, serão incluídos aqui. Dúvidas e sugestões podem ser enviadas para nossos e-mails.\nPara ver a proposta mais geral do livro, clique aqui.\nObs: bases de dados usadas nos capítulos estão disponíveis aqui.\nAntes de prosseguir, vamos preparar o terreno: o R é um ambiente de programação, o que significa que não abriremos um banco de dados utilizando um menu de tarefas, nem calcularemos estatísticas clicando em um botão. Em vez disso, precisaremos programar, isto é, escrever código de forma ordenada que será executado sequencialmente pelo computador. Aprender a programar, especialmente no início, pode ser um pouco difícil, mas acho que não preciso reforçar o quanto todo o esforço envolvido valerá à pena."
  },
  {
    "objectID": "index.html#um-exemplo",
    "href": "index.html#um-exemplo",
    "title": "Usando R: Uma Introdução para Cientistas Sociais",
    "section": "Um exemplo",
    "text": "Um exemplo\nEm Desenvolvimento"
  },
  {
    "objectID": "index.html#a-nossa-filosofia-de-trabalho",
    "href": "index.html#a-nossa-filosofia-de-trabalho",
    "title": "Usando R: Uma Introdução para Cientistas Sociais",
    "section": "A nossa filosofia de trabalho",
    "text": "A nossa filosofia de trabalho\nEm Desenvolvimento"
  },
  {
    "objectID": "index.html#para-quem-é-este-livro",
    "href": "index.html#para-quem-é-este-livro",
    "title": "Usando R: Uma Introdução para Cientistas Sociais",
    "section": "Para quem é este livro?",
    "text": "Para quem é este livro?\nEm Desenvolvimento"
  },
  {
    "objectID": "index.html#como-usar-o-livro",
    "href": "index.html#como-usar-o-livro",
    "title": "Usando R: Uma Introdução para Cientistas Sociais",
    "section": "Como usar o livro",
    "text": "Como usar o livro\nEm Desenvolvimento"
  },
  {
    "objectID": "index.html#começando",
    "href": "index.html#começando",
    "title": "Usando R: Uma Introdução para Cientistas Sociais",
    "section": "Começando",
    "text": "Começando\nEm Desenvolvimento"
  },
  {
    "objectID": "01-cap.html#introducao-ao-r",
    "href": "01-cap.html#introducao-ao-r",
    "title": "1  Básico",
    "section": "1.1 Introdução ao R",
    "text": "1.1 Introdução ao R\nEste capítulo é o nosso primeiro encontro com o R. Nele, veremos alguns dos principais conceitos necessários para poder usá-lo para análise de dados – que, afinal de contas, é o nosso principal interesse aqui.\nVale reforçar: esta não é uma introdução formal ao R, comum em outros livros. Este capítulo cobre apenas o fundamental para saltarmos diretamente para o uso de ferramentas mais avançadas, que nos ajudarão a fazer análise de dados e pesquisa acadêmica.\nAntes de começar, no entanto, precisaremos instalar o R. Na verdade, precisaremos instalar dois softwares: o R e o RStudio. O primeiro é de fato o software por detrás da linguagem de programação, mas ele não possui um interface, como o Excel ou outros softwares de armazenamento e análise de dados. É por isso que usaremos o R por meio do segundo software, o RStudio, que é um interface com um conjunto de funcionalidades que nos ajudará a trabalhar com o R. Depois disso, o restante do capítulo introduz noções de como escrever código em R, como salvar e manipular informações na memória, como usar funções e como instalar pacotes."
  },
  {
    "objectID": "01-cap.html#intalando-o-r-e-rstudio",
    "href": "01-cap.html#intalando-o-r-e-rstudio",
    "title": "1  Básico",
    "section": "1.2 Intalando o R e RStudio",
    "text": "1.2 Intalando o R e RStudio\nO R é um programa de código aberto1 que pode ser baixado gratuitamente em https://cran.r-project.org, o site oficial do projeto que mantém o R. Uma vez no site, basta buscar pela opção download e seguir as instruções específicas para o seu sistema operacional.2 A instalação deverá criar um atalho para o R no seu computador que, uma vez acessado, provavelmente mostrará algo como indica a Figura 1.1.\n\n\n\nFigura 1.1: Console do R\n\n\nSem uma interface, o R nada mais é do que um console, uma tela textual onde podemos ler e digitar código. Para termos uma interface melhor, podemos agora baixar o RStudio em https://posit.co/download/rstudio-desktop/, site da empresa que o mantém – apesar de desenvolverem também outras versões, o RStudio Desktop – Open Source License também é gratuito. Novamente, basta buscar a opção mais adequada para o seu sistema operacional e seguir as intruções de instalação. Abrindo o atalho do RStudio, a visão deverá ser bem melhor.\n\n\n\nFigura 1.2: RStudio\n\n\n\n1.2.1 O RStudio\nNo RStudio, temos 4 sub-janelas por padrão, isto é, a janela do software é dividida em quatro áreas diferentes, como ilustra a Figura. Um resumo da utilidade de cada uma:\n\nJanela de script na qual escrevemos e documentamos nossos códigos;\nConsole do R, onde podemos executar código e, também, ter retorno de mensagens de erro e avisos;\nNesta sub-janela tempo duas abas principais:\n\nEnvironment, na qual visualizamos quais objetos estão na memória do R (e.g., vetores, banco de dados, listas);\nHistory, na qual podemos ver o histórico dos códigos que já executamos;\n\nAqui temos cinco abas principais:\n\nFiles, onde é possível visualizar a lista de arquivo da pasta (área de trabalho, no jargão do R) em que você está trabalhando no seu computador;\nPlots, na qual podemos visualizar gráficos criado no R;\nPackages, que exibi pacotes de funções instalados no R; e, (d) Help; onde será visualizadas as ajudas solicitadas dentro do próprio programa;\nView, usada para visualizar o resultado da execução de certas funções.\n\n\nDe início, o mais importante é pensar no RStudio como uma espécie de pacote Office, mas para o R: é nele que escreveremos nossos códigos, executaremos e visualizaremos os seus resultados.\n\n\n1.2.2 Usando o R e o RStudio pelo navegador\nPara quem tem problemas ao instalar o R, ou não pode instalá-los por qualquer razão, há uma alternativa simples pela nuvem: o Posit Cloud, uma plataforma mantida pela mesma empresa do RStudio que permite o seu uso diretamente pelo navegador, sem a necessidade de instalação. Para usá-lo, basta criar uma conta no site, selecionar o plano gratuito (Free forever) e começar a usar o R de lá. A tela do seu navegador deverá mostrar algo como na Figura 1.3.\n\n\n\nFigura 1.3: Usando o RStudio do navegador"
  },
  {
    "objectID": "01-cap.html#sintaxe-básica-do-r",
    "href": "01-cap.html#sintaxe-básica-do-r",
    "title": "1  Básico",
    "section": "1.3 Sintaxe básica do R",
    "text": "1.3 Sintaxe básica do R\nA partir de agora, começaremos a aprender R do jeito mais direto possível: escrevendo e executando códigos. Para tanto, as próximas seções começarão a introduzir exemplos de código que, a princípio, podem parecer confusas. Mas não se preocupe: o objetivo é aprendermos R de forma prática, sem memorizações, entendendo o que cada parte de um código faz.\nDaqui até o final do livro, o seguinte se aplicará:\n\nTudo o que estiver em caixa cinza, com texto destacado por cores, é código e pode ser executado no R (basta copiar e colar o código no console do RStudio, janela (2) na Figura 1.1, e apertar enter);\nTudo o que estiver logo após precedido de um [1] ou algo do tipo é output do R, isto é, o resultado da execução de um código;\nAlguns códigos dependem de códigos anteriores; caso encontre algum erro ao rodar um código de exemplo neste livro, tente voltar atrás e rodar os códigos anteriores.\n\n\n1.3.1 R como uma calculadora\nAssim como em outras linguagens de programação, podemos usar o R como uma calculadora. Experimento digitar 2 + 2 no console do RStudio e apertar enter:\n\n2 + 2\n\n[1] 4\n\n\nO R reproduzirá o resultado da soma antecedido por [1]. Aproveitando a deixa, # indica um comentário: tudo o que vem sucedido de # o R não executará.\n\n# 2 + 2\n\nNada acontece. Comentários são úteis para documentar nossos códigos, algo que veremos em seguida. Por enquanto, experimente usar o console como uma calculadora (logo veremos usos mais interessantes do R):\n\n8 + 7 # Adição (depois do #, nada é executado)\n\n[1] 15\n\n8 - 7 # Subtração (depois do #, nada é executado)\n\n[1] 1\n\n\nPara resolver expressões numéricas, usamos ().3\n\n2 / (3 + 5)\n\n[1] 0.25\n\n4 * ((2 ^ 5) / 3)\n\n[1] 42.66667\n\n\n\n\n1.3.2 Operadores\nAnteriormente, usamos operadores aritméticos, como + e * (você deve ter percebido que * é o operador de multiplicação no R, e não x). No R, existem vários outros (tente adaptar os exemplos):\n\n3^2\n\n[1] 9\n\n11 / 5\n\n[1] 2.2\n\n11 %/% 5\n\n[1] 2\n\n11 %% 5\n\n[1] 1\n\n\nCaso você não tenha entendido algum apenas pelo seu uso, a Tabela 1.1 apresenta uma descrição dos principais operadores matemáticos comuns em R.\n\n\nTabela 1.1: Operadores matemáticos no R\n\n\nOperação\nSímbolo\n\n\n\n\nAdição\n+\n\n\nSubtração\n-\n\n\nDivisão\n/\n\n\nMultiplicação\n*\n\n\nExponenciação\n^\n\n\nDivisão inteira\n%/%\n\n\nResto da divisão\n%%\n\n\n\n\nAlém dos operandos matemáticos, existem também operadores lógicos, que usamos para saber se algo é verdadeiro ou falso. Para sermos mais concretos, podemos usar == (dois =) para testar se um número é igual a outro:\n\n1 == 1\n\n[1] TRUE\n\n\nO que o código anterior faz é testar se 1 é igual a 1, retornando TRUE. Um exemplo falso:\n\n2 == 1\n\n[1] FALSE\n\n\nTestes lógicos também nos permitem fazer operações mais complexas. Por exemplo, podemos testar se um número é maior ou menor que outro:\n\n10 &gt; 5\n\n[1] TRUE\n\n3 &gt; 1\n\n[1] TRUE\n\n\nE, indo além, podemos combinar dois testes usando o operador & (que significa E, ou AND):\n\n(10 &gt; 5) & (3 &gt; 1)\n\n[1] TRUE\n\n(10 &gt; 5) & (5 &lt; 2)\n\n[1] FALSE\n\n\nNo caso acima, o resultado de cada expressão só será TRUE se ambos os testes forem verdadeiros. Se quisermos que o resultado seja TRUE se pelo menos um dos testes for verdadeiro, usamos o operador | (ou):\n\n(10 &gt; 5) | (5 &lt; 2)\n\n[1] TRUE\n\n\n\n\n\n\n\n\nTestes lógicos\n\n\n\nTestes lógicos sempre retornam TRUE ou FALSE, em maiúsculo.\n\n\nA Tabela 1.2 apresenta os operadores lógicos mais comuns:\n\n\nTabela 1.2: Operadores lógicos comuns no R\n\n\nOperação\nSímbolo\nExemplo\n\n\n\n\nIgualdade\n==\n1 == 1\n\n\nDiferença\n!=\n1 != 1\n\n\nMaior que\n&gt;\n1 &gt; 1\n\n\nMenor que\n&lt;\n1 &lt; 1\n\n\nMaior ou igual\n&gt;=\n1 &gt;= 1\n\n\nMenor ou igual\n&lt;=\n1 &lt;= 1\n\n\nE\n&\n(1 == 1) & (2 == 2)\n\n\nOU\n|\n(1 == 1) | (2 == 2)\n\n\nNÃO\n!\n!(1 == 1)\n\n\n\n\nTodos esses operadores são úteis – mas certamente não é por causa deles que o R é tão utilizado."
  },
  {
    "objectID": "01-cap.html#funções",
    "href": "01-cap.html#funções",
    "title": "1  Básico",
    "section": "1.4 Funções",
    "text": "1.4 Funções\nParte da potencialidade do R advém do fato dele conter uma série de funções nativas para realizar as mais diversas tarefas de pesquisa. É por isso que ele é considerado um ambiente, e não apenas uma linguagem de programação.4 Dito de forma simples, funções são códigos que executam uma tarefa específica. A função sqrt(), por exemplo, calcula a raiz quadrada de um número:\n\nsqrt(4) # Raiz quadrada do número 4\n\n[1] 2\n\n\nEm R, funções têm uma anatomia específica: o nome da função, seguido de parênteses, dentro dos quais estão os argumentos da função – o input que a função recebe e processa. No caso da função sqrt(), o argumento é o número cuja raiz quadrada queremos calcular.5 Vale memorizar: uma função nada mais é do que uma espécie de ferramenta que recebe uma determinada informação e a transforma em outra.6\n\n1.4.1 Usando funções\nNo R, as informações que passamos para determinada função vão dentro de parêntesis. A função sum, por exemplo, recebe e soma dois ou mais números, todos separados por vírgula. Se esquecermos de fazer essa separação, obtemos um erro.\n\nsum(2 2) # retorna erro \n\nError: &lt;text&gt;:1:7: unexpected numeric constant\n1: sum(2 2\n          ^\n\n\n\n\n\n\n\n\nErros\n\n\n\nQuando executamos um código que o R não consegue interpretar, ele retorna um erro no console.\n\n\nPara corrigir o código anterior, basta separar os números por vírgula:\n\nsum(2, 2) # retorna 4\n\n[1] 4"
  },
  {
    "objectID": "01-cap.html#objetos",
    "href": "01-cap.html#objetos",
    "title": "1  Básico",
    "section": "1.5 Objetos",
    "text": "1.5 Objetos\nPara além de executar código, o R nos permite salvar informações na memória do programa. Essas informações são armazenadas em objetos, que podem ser usados posteriormente. De forma bem simples, objetos são como locais na memória do programa que armazenam valores quaiser. No R esses valores podem ser: números, textos, um vetor de números (isto é, uma sequência de números), um banco de dados e, até mesmo, uma função.\nPodemos armazenar objetos no R com o operador &lt;- (menor que, seguido de hífen). Basicamente, ele diz ao R para armazenar um valor em um objeto para podermos acessá-lo posteriormente. Exemplo: vamos salvar o número 2 em um objeto chamado x.\n\nx &lt;- 2\n\nTocamos em algo extremamente importante: agora, podemos digitar x no lugar de 2 para realizar outras operações.\n\nx\n\n[1] 2\n\nx + 1\n\n[1] 3\n\nx / 2\n\n[1] 1\n\n\nE como fazemos para salvar o resultado de uma nova operação, como x + 10, por exemplo? Simples: basta criar um novo objeto.\n\ny &lt;- x + 10\ny\n\n[1] 12\n\n\nAlgo que ainda não vimos, também é possível armazenar texto em um objeto – note que, para o R reconhecer algo como texto, precisamos colocá-lo entre aspas:\n\ntexto &lt;- \"um texto\"\ntexto\n\n[1] \"um texto\"\n\n\nNo R elementos entre aspas, simples ou duplas, são considerados textos.\n\n\n\n\n\n\nCriação de objetos\n\n\n\nNo R também é possível criar objetos usando o símbolo de igualdade, =, como em x = 1. No entanto, não usaremos essa sintaxe neste livro e, por razões de consistência de código, também não recomendamos seu uso.\n\n\n\n1.5.1 Tipos de objeto\nNúmeros são diferentes de textos e, em R, essa diferença também existe: ela é dada pelas classes de objetos. Classes são como categorias de objetos, isto é, grupos de objetos que compartilham de uma mesma estrutura e, portanto, podem ser manipulados de forma semelhante. O número 1 é um objeto da classe integer (inteiro), assim como os números 2 e 10, que também são inteiros. O número 1,5, ao contrário, é um objeto da classe numeric, dado que não é um número inteiro (por conta da casa decimal). Para saber a classe de um objeto, usamos a função class():\n\nclass(1)\n\n[1] \"numeric\"\n\nclass(1.5)\n\n[1] \"numeric\"\n\n\nDiferentes funções podem exigir diferentes classes de objetos. Por exemplo, a função sum() exige que os objetos que ela soma sejam da classe numeric ou integer. Se tentarmos somar um objeto da classe character, o R retornará um erro:\n\nsum(\"1\", \"2\")\n\nError in sum(\"1\", \"2\"): 'type' inválido (character) do argumento\n\n\nPara resumir, classes determinam o tipo de informação que diferentes objetos armazenam e o que podemos fazer com elas. Entendido isso, podemos começar a aprender sobre as classes mais comuns no R: integer, numeric, character, factor, matrix, data.frame e list.\n\n1.5.1.1 Números, textos e categorias\n\n1.5.1.1.1 integer\ninteger é uma classe de objeto específica para números inteiros.\n\nexemplo_inteiro &lt;- 20\nclass(exemplo_inteiro)\n\n[1] \"numeric\"\n\n\nAté agora, só criamos objetos com um elemento, mas, quando estamos analisando muitos dados, podemos combiná-los em vetores, ou seja, objetos com mais de um elementos (mais de um caso). Uma forma elementar de criar um vetor é por meio da função combine, c:\n\n# Cria um vetor de números\nx &lt;- c(18, 20, 19, 25, 21)\nx\n\n[1] 18 20 19 25 21\n\n\n\n\n1.5.1.1.2 numeric\nA classe numeric também é composta por números, mas, diferentemente de integer, armazenam números decimais.\n\nexemplo_decimal &lt;- 20.5\nclass(exemplo_decimal)\n\n[1] \"numeric\"\n\n\nPor padrão, o R já atribui classe aos objetos quando os criamos, deduzindo o tipo adequado a partir do nosso código. No caso de integer ou numeric, a escolha está atrelada à quantidade de memória reservada no programa para armazenar as informações: quando temos números decimais, a classe sempre será numeric pois é necessário mais espaço para guardar informações das casas decimais, e todos os números do vetor passaram a ter um decilma, mesmo aqueles que foram declarados (inseridos) sem decimal:7\n\ny &lt;- c(50, 65.5, 55.8, 70, 85.6)\nclass(y)\n\n[1] \"numeric\"\n\n\n\n\n\n\n\n\nDecimal\n\n\n\nO R adota o sistema de casas decimais americano, com ponto. Por isso, ao declarar um número decimal no R, usamos o ponto, e não a vírgula.\n\n\n\n\n1.5.1.1.3 character\nComo já dito, character é a classe usada no R para armazenar informações textuais, que devem estar contidas entre aspas.\n\nw &lt;- c(\"superior\", \"médio\", \"fundamental\", \"superior\")\nclass(w)\n\n[1] \"character\"\n\n\n\n\n1.5.1.1.4 factor\nSimilar a character, factor é uma classe que guarda simulneamente uma informação textual com uma númerica associada – o que costumamos chamar de variável categórica nas Ciências Sociais e similares.\n\nz &lt;- factor(c(\"Feminino\", \"Masculino\", \"Feminino\", \"Masculino\", \"Feminino\"))\nclass(z)\n\n[1] \"factor\"\n\nz\n\n[1] Feminino  Masculino Feminino  Masculino Feminino \nLevels: Feminino Masculino\n\n\nComo podemos ver pelo retorno do R anterior, um vetor da classe factor nos mostra seus levels, ou seja, as categorias da nossa variavel: Feminino e Masculino. Mas, como podemos ver, o R não nos mostra os valores numéricos associados a cada categoria. Para isso, podemos usar a função as.numeric(), que converte objetos de outras classes para numeric (quando essa conversão for possível):\n\nas.numeric(z)\n\n[1] 1 2 1 2 1\n\n\n\n\n\n1.5.1.2 Matrizes e bancos de dados\n\n1.5.1.2.1 matrix\nA classe matrix é um tipo de objeto bidimensional utilizada principalmente para representar linhas e colunas. De forma geral, matrizes são espécies de tabelas ou planilhas como as que vemos no Excel, mas com uma diferença essencial: todos os elementos devem ser do mesmo tipo, isto é, todos numeric, integer, character, e assim por diante.\nPodemos criar uma matriz com a função matrix, declarando argumentos que indicam quantas linhas e quantas colunas essa matriz deverá ter. Um exemplo de matriz:\n\nmatriz &lt;- matrix(c(1, 3, 4, 5, 6, 7), nrow = 2,  ncol = 3) \nmatriz\n\n     [,1] [,2] [,3]\n[1,]    1    4    6\n[2,]    3    5    7\n\nclass(matriz)\n\n[1] \"matrix\" \"array\" \n\n\nNote que, no exemplo anterior, criamos uma matriz com 2 linhas e 3 coluna epassamos a ela um vetor com os elementos c(1, 3, 4, 5, 6, 7). Em outras palavras, os argumentos nrow (i.e., número de linhas) e ncol (i.e., número de colunas) determinam como o conteúdo da matriz será dividido entre linhas e colunas.\n\n\n1.5.1.2.2 data.frame\nJá que matrizes salvam apenas informações da mesma classe, naturalmente precisamos de outra classe se quisermos analisar variáveis, ou colunas, de classes diferentes. data.frame é exatamente a classe que nos permite fazer isso. Especificamente, data.frame também é bidimensional e tabular, como a matrix, mas é mais versátil.\nVamos criar aqui um banco de dados a partir de vetores com a função data.frame:\n\nx &lt;- c(\"Superior\", \"Médio\", \"Médio\")\ny &lt;- c(23, 45, 63)\nz &lt;- c(\"Feminino\", \"Masculino\", \"Masculino\")\nbanco &lt;- data.frame(escolaridade = x, idade = y, sexo = z)\nclass(banco)\n\n[1] \"data.frame\"\n\n\nCom o banco criado, podemos ver suas informações com a função print, que serve para mostrar no console o conteúdo de um objeto:\n\nprint(banco)\n\n  escolaridade idade      sexo\n1     Superior    23  Feminino\n2        Médio    45 Masculino\n3        Médio    63 Masculino\n\n\nPara o caso de bancos maiores, podemos usar a função View(), que abrirá uma nova janela no RStudio com o conteúdo do banco de dados.8\n\n\n\n\n\n\ndata.frames\n\n\n\nPara criar matrizes e bancos de dados a partir de vetores, todos eles precisam ter o mesmo número de elementos, caso contrário o R retornará um erro.\n\n\n\n\n\n1.5.1.3 Listas\nFinalmente, os objetos da classe list são um dos mais complexos que veremos – eles são multimensionais. Em particular, com eles armazenamos objetos de diferentes classes, mas não só vetores do mesmo tamanho como em um data.frame. Ou seja, em um objeto tipo list podemos armazenar vetores de diversos tamanhos, matrix e data.frame, ou mesmo outras listas. Vejamos um exemplo:\n\n# Cria uma lista chamada 'guarda_trecos'\nguarda_trecos &lt;- list(x, y, z, banco)\nclass(guarda_trecos)\n\n[1] \"list\"\n\nprint(guarda_trecos)\n\n[[1]]\n[1] \"Superior\" \"Médio\"    \"Médio\"   \n\n[[2]]\n[1] 23 45 63\n\n[[3]]\n[1] \"Feminino\"  \"Masculino\" \"Masculino\"\n\n[[4]]\n  escolaridade idade      sexo\n1     Superior    23  Feminino\n2        Médio    45 Masculino\n3        Médio    63 Masculino\n\n\nComo podemos ver cada item (objeto) foi armazendos na lista guarda_trecos, na ordem em que foram colocado dentro da função list().\n\n\n\n1.5.2 Manipulando objetos\nCriamos alguns objetos de distintas classes e exibimos eles por completo no console. Mas e se quisermos apresentar no console apenas um elemento de um objeto? Para isso precisamos nos mover pelos objetos usandos índices. Ao exibir elementos de um objeto no console, o R há nos dá uma dica de como fazer isso: o [1] sempre indica o conteúdo do primeiro elemento. Se quisermos acessá-lo, basta executar:\n\nx &lt;- c(1, 2, 3, 4, 5)\nx[1]\n\n[1] 1\n\n\nDe forma geral, em objetos unidimensional basta usar objeto[índice], com a posição desejada em colchetes, para acessar determinado elemento, como o quarto e o quinto, digamos:\n\nx[4]\n\n[1] 4\n\nx[5]\n\n[1] 5\n\nx[c(4, 5)] # Podemos outro vetor para acessar mais de um elemento\n\n[1] 4 5\n\n\nEm objetos multidimensionais como um data.frame o modo de acesso de um elemento é um pouco diferente. Por exemplo, no nosso objeto banco criado anteriormente precisamos indexar linhas e colunas, objeto[linhas, colunas]. Para acessar a célula da primeira linha e da terceira coluna, usamos:\n\nbanco[1, 3]\n\n[1] \"Feminino\"\n\n\nNo exemplo acima, estamo selecionando o elemento (caso) numero 1 que estar na coluna (variável) 3 que é o sexo. É importante fixar: em objeto bidimensional como um data.frame, antes da virgula nos colchetes temos as linhas e, só depois da virgula, as colunas. Outro caso:\n\nbanco[, 3]\n\n[1] \"Feminino\"  \"Masculino\" \"Masculino\"\n\n\nQuando deixamos o do lado esquerdo do colchete vazio, estamos dizendo ao R que retorne um vetor com todas as linhas (casos) da coluna (variável) identificada no lado direito da virgula. Nesse exemplo, temos o sexo de todas as pessoas no banco. Já aqui, pegamos todas as informações da pessoa na segunda linha do banco:\n\nbanco[2, ]\n\n  escolaridade idade      sexo\n2        Médio    45 Masculino\n\n\nSe quizermos selecionar mais um caso ou variável podemos usar um vetor, também podemos usar vetores usando a função c ou dois pontos, para criar uma sequência de inteiros entre dois números:\n\nbanco[3:5, c(1, 3)]\n\n     escolaridade      sexo\n3           Médio Masculino\nNA           &lt;NA&gt;      &lt;NA&gt;\nNA.1         &lt;NA&gt;      &lt;NA&gt;\n\n\nNo exemplo acima estamos selecionando os casos de 3 a 5 (o código 3:5 cria uma sequência de inteiros de 3 a 5) da base de dados e as variáveis 1 e 3.\nIndexadores também funcionam em listas, mas com uma diferença: como listas são objetos multimensionais, precisamos usar dois conjuntos de colchetes para acessar elementos. Por exemplo, para acessar o primeiro elemento da lista guarda_trecos, usamos:\n\nguarda_trecos[[1]]\n\n[1] \"Superior\" \"Médio\"    \"Médio\"   \n\n\nO primeiro conjunto de colchetes indica que queremos acessar um elemento da lista, enquanto o segundo indica qual elemento queremos acessar. Se quisermos acessar um valor dentro do primeiro elemento da lista, basta adicionar um colchete simples logo depois dos colchetes duplos indicando o índice do elemento desejado:\n\nguarda_trecos[[1]][2]\n\n[1] \"Médio\"\n\n\nCom isso, selecionamos o segundo elemento do vetor amarzenado na sublista 1. E se o conteúdo da sublista for um data.frame, como aceso um valor dentro dele? Assim:\n\nguarda_trecos[[4]][1, 3]\n\n[1] \"Feminino\"\n\n\nPara data.frames, há um jeito mais simples de se acessar o conteúdo inteiro de uma variável: por meio do cifrão ($). Por exemplo, para acessar a variável sexo do banco, basta executar:\n\nbanco$sexo\n\n[1] \"Feminino\"  \"Masculino\" \"Masculino\"\n\n\nComo dá para notar, é preciso saber o nome da coluna que queremos acessar para usar esse meio de indexação. Um jeito simples de fazer isso é usando a função names(), que retorna os nomes das colunas de um data.frame:\n\nnames(banco)\n\n[1] \"escolaridade\" \"idade\"        \"sexo\"        \n\n\nAssim sabemos que a primeira variável se chama “escolaridade”, a segunda “idade”, e assim por diante.\nCombinando o $ com os indexadores que vimos há pouco, é fácil obter, por exemplo, o terceiro elemento da variável sexo no objeto banco:\n\nbanco$sexo[3]\n\n[1] \"Masculino\"\n\n\nManipular objetos no R pode parecer bastante complicado, mas, com o devido tempo e prática, tudo se torna mais simples. Ao final deste capítulo, sugerimos alguns exercícios que ajudarão no processo."
  },
  {
    "objectID": "01-cap.html#pacotes",
    "href": "01-cap.html#pacotes",
    "title": "1  Básico",
    "section": "1.6 Pacotes",
    "text": "1.6 Pacotes\nO R já vem com uma série de funcionalidades embutidas nele – como as funções sqrt e sum, que já vimos. Mas, como já dito, uma das grandes vantagens do R é a sua comunidade, que desenvolve novas funcionalidades para a linguagem e, norlamente, as disponibilizam por meio de pacotes, ou bibliotecas. Estes são como extensões do R, que adicionam novas funcionalidades ao programa – pense em um pacote como um livro de receitas ou um manual de instruções, que ensina o R como fazer coisas novas.\nEm R, a principal fonte de pacotes o CRAN (The Comprehensive R Archive Network), que é uma comunidade de desenvolvedores que mantém o código base do R e os seus pacotes oficiais, aqueles que passaram por uma série de testes e que seguem uma série de protocolos que garantem o seu funcionamento estável e harmônico com outras ferramentas no R.9\n\n1.6.1 Instalando Pacotes\nPara instalar pacotes que está no CRAN, basta sabermos o seu nome e usar a função install.packages:\n\ninstall.packages(\"electionsBR\")\n\nNo exemplo acima, instalamos o pacote electionsBR e, com ele, damos ao R a capacidade de se conectar ao repositório de dados eleitorais do TSE (Tribunal Superior Eleitoral) para obter informações eleitorais.\n\n\n1.6.2 Instalação de pacotes do GitHub\nApesar da imensidade de pacotes no CRAN, encontramos outro grande volume de pacotes em outros repositórios não-oficiais, a maioria em densevolvimento. A principal fonte destes pacotes, depois do CRAN, é o GitHub.10\nPara instalar pacotes do GitHub, precisamos instalar outro pacote antes, o remotes:\n\ninstall.packages(\"remotes\")\n\nEste pacote contém uma função, install_github, que permite ao R se conectar ao GitHub, obter de lá o código fonte de um pacote e realizar a sua instalação. Para usar esta função, precisamos antes carregar o pacote remotes, isto é, tornar ela acessível ao R, o que fazemos por meio da função library:\n\nlibrary(remotes) # Carrega o pacote\ninstall_github(\"silvadenisson/electionsBR\") # Instala o pacote\n\nInstalar e carregar pacotes são duas tarefas similares, mas suas diferenças são importantes: no primeiro caso, estamos incorporando novas funções no nosso R, assim como instalar o Office no computador nos permite usar o processador de texto Word; no segundo caso, estamos carregando o pacote instalado, assim como quando abrimos o Word pelo seu atalho no computador.\n\n\n\n\n\n\nPacotes\n\n\n\nPacotes só precisam ser instalados uma vez, mas precisam ser carregados (abertos) no R em cada seção em que precisarmos de suas funções.\n\n\nNo exemplo anterior, usamos a função library para carregar o pacote remotes; com este, usamos a função install_github para instalarmos a versão de desenvolvimento do pacote electionsBR."
  },
  {
    "objectID": "01-cap.html#scripts",
    "href": "01-cap.html#scripts",
    "title": "1  Básico",
    "section": "1.7 Scripts",
    "text": "1.7 Scripts\nTrabalhar no console, digitando e executando código diretamente de lá, é algo rápido para tarefas simples, mas inviável para análises mais complicadas. Pior que isso, sem poder salvar nossos códigos em algum lugar, não temos como reproduzir uma análise, ou compartilhar nossos passos com outras pessoas. Justamente para evitar isso, usamos scripts, documentos de texto que servem para documentar e armazenar códigos.\nNo Rstudio, podemos criar um script clicando, no menu superior esquerdo, em File &gt; New File &gt; R Script, ou, também no canto superior esquerdo, no símbolo de uma folha em branco acompanhada de um símbolo de mais em verde. Feito isso, uma nova janela será aberta, na qual podemos escrever nosso códigos. Para salvá-los, basta clicar em File &gt; Save e escolher um nome para o arquivo, ou clicar no ícone de disquete ligeiramente acima, ou, ainda, teclar ctrl/command + s. O script salvo aparecerá na sub-janela de gestão de arquivos do RStudio, indicada no item 4 da Figura 1.2.\nPara acompanhar o restante deste capítulo e os próximos, acostume-se a criar scripts e use comentários para descrever o que cada linha faz – isso será muito útil para documentar o que estamos aprendendo. A título de exemplo, um script de acompanhamento deste capítulo poderia ter o seguinte início:\n\n# Capítulo 1: Introdução ao R\n\n# Este é um comentário. Ele não é executado pelo R, mas serve para documentar o que estamos fazendo.\n# Para executar um código, basta clicar na linha e teclar ctrl/command + enter.\n# Para executar várias linhas, basta selecioná-las e teclar ctrl/command + enter.\n\n# Criando objetos\nx &lt;- 2\ny &lt;- x + 10\n\n# ...\n\nDocumentar o script é uma das tarefas mais importantes do densolvimento do seu código. Primeiro porque podes voltar em um outro momento e saber o que exatamente estas tentendo fazer com seu script. Isso pode parecer tolice, mas tenha certeza que não é, principalmente quando chegamos no nível de trabalhar com muitos scripts.\nEsse motivo acima já sería suficiente, no entanto, há outro mais importante para o desenvolvimento de pesquisas científicas que é a replicabilidade. Pois, quando documenta teu código aumenta a capacidade replicativa dele. E replicabilidade é a plavra que chave na ciência, porque não fazemos ciência para ficar na gaveta, ou melhor, em pasta perdida dentro do computador, e sim para que outra pessoa saibam o que fizemos e possam replicar, vamos abordar mais sobre replicação no capítulo 8."
  },
  {
    "objectID": "01-cap.html#recomendações",
    "href": "01-cap.html#recomendações",
    "title": "1  Básico",
    "section": "1.8 Recomendações",
    "text": "1.8 Recomendações\nPodemos criar objetos e realizar operações no R de forma simples, como vimos. No entanto, algumas coisas devem ser evitadas quando escrevemos nosso código, seja para evitar erros ou para facilitar a leitura dele por outras pessoas.\nA recomendação mais básica neste sentido é: evite criar objetos com nomes que comecem com números, caracteres especiais ou nomes de funções. Algumas destas coisas produzirão erros imediatos; outras, podem complicar códigos inteiros. Alguns exemplos.\n\n# Exemplos de nomes de objetos que produzem erros\n2x &lt;- 1\n_x &lt;- 1\n&x &lt;- 1\n\nError: &lt;text&gt;:2:2: unexpected symbol\n1: # Exemplos de nomes de objetos que produzem erros\n2: 2x\n    ^\n\n\n\n# Exemplos de nomes de objetos que não produzem erros imediatos\nsum &lt;- 1\nsqrt &lt;- 1\n\nTambém note que o R é case sensitive, A (maiúsculo) não é a mesma coisa que a (minúsculo).\n\nA &lt;- 1\nprint(a)\n\nError in eval(expr, envir, enclos): objeto 'a' não encontrado\n\n\nSempre que criar um objeto armazenando texto, não esqueça das aspas (outra forma de cometer erros no R bastante comum).\n\nx &lt;- Texto\n\nError in eval(expr, envir, enclos): objeto 'Texto' não encontrado\n\n\nPor fim, quando abrir parênteses, não esqueça de fechá-los (caso contrário, aparecerá um + no console, indicando que o R espera mais conteúdo). Caso esteja executando um código e não saiba porque apareceu um + no cosole, opte por cancelar a operação e volte ao código para ver o que há de errado.11\n\n1.8.1 Estilo\nNão é algo obrigatóro, mas algumas noções de estilo nos ajudam a compreender e partilhar códigos, tanto nossos quanto os de outras pessoas. Resumidamente, as principais considerações aqui são:\n\nUse espaços entre objetos, operadores e chamadas a funções;\nUse quebra de linhas para separar blocos de códigos;\nSempre que possível, crie objetos apenas com letras minúsculas;\nSe precisar separar o nome de um objeto, use _ (underscore);\nPrefira nomes curtos para objetos;\nPrefira o atribuidor &lt;- a = (eles fazem a mesma coisa).\n\n\ny&lt;-1 # Ruim\ny &lt;- 1 # OK\n\ny+y+y+y # Ruim\n\n[1] 4\n\ny + y + y + y # OK\n\n[1] 4\n\nprint (y) # Ruim\n\n[1] 1\n\nprint(y) # OK\n\n[1] 1\n\ny = 1 # Ruim\ny &lt;- 1 # OK\n\nOBJETO &lt;- 1 # Ruim\nobjeto &lt;- 1 # OK\n\nmeu.objeto &lt;- 1 # Ruim\nmeu_objeto &lt;- 1 # OK\n\nobjeto_com_nome_excessivamente_grande &lt;- 1 # Ruim\nobjeto &lt;- 1 # OK"
  },
  {
    "objectID": "01-cap.html#obtendo-ajuda",
    "href": "01-cap.html#obtendo-ajuda",
    "title": "1  Básico",
    "section": "1.9 Obtendo ajuda",
    "text": "1.9 Obtendo ajuda\nPara a nossa sorte a comunidade em torno do R cresceu muito nos ultimos anos, o que aumentou a quantia de material disponível na internet sobre a linguagem. De toda forma, a maneira mais simples de obter ajuda no R sobre alguma função ou operador é consultando a documentação – em geral, muito boa. Para isso, podemos usar a função help:\n\nhelp(sum)\n\nEsse recurso só é útil quando sabemos o nome exata da função que queremos consultar e, como é possível imaginar, quando essa função pertence a algum pacote e este pacote está instalado e carregado devidamente. Outra forma de consultar documentação é usando um ponto de interrogação antes do nome de uma função:\n\n?sum\n\nQuando não sabemos o nome da função que queremos usar, ou até mesmo para saber se existe no R uma função específica para a tarefa que queremos executar, temos recorrer a outras fontes. Antes mesmo de ir para o Google, no entanto, há no próprio R um pacote que faz uma busca por palavras-chave do que há no R, o sos. Para usá-lo, precisamos instalá-lo e, depois, carregá-lo:\n\ninstall.packages(\"sos\")\n\n\nlibrary(sos)\n\nE, então, usar a função findFn, que tem como argumento principal um texto (string) que será pesquisado. Exemplo:\n\nfindFn('regresion')\n\nQuando executada, a função irá abrir seu navegador em uma pagina com os resultado, como a Figura 1.4 ilustra.\n\n\n\nFigura 1.4: Pacote sos\n\n\nQue nos apresenta o nome do pacote, o nome da funçção que tem algum relação com o termo pesquisado, e uma brece descrição onde podemos clicar e ver mais detalhes da função.\nAlem dessas opções a internete está cheia de material, e acada dia cresce mais, por exemplo nos ultimos anos tem almentado exponencialmente a quantidade de tutoriais no yourtube. Mas, o que vamos destar a aqui é o stackoverflow, R-bloggers, R Brasil - Programadores (Facebook), rbloggersbr (twitter).\nO Primeiro deles é um fórum onde porgramadores de todos os níveis e linguagens publicam problemas e soluções. Originalmente em inglês, mas que agora conta com uma versão para que os problemas e soluções sejam postado em português o que facilita na expansão das linguagens de programções em especial, R. O endereço é https://pt.stackoverflow.com. Para refinar as busca dentro do fórum é necessario antes do termo buscado inserir o nome da linguagem dentro de conchetes.\nEx.: [R] data.frame\nO R-bloggers é um site que reuni postagens de varios blogs sobre R, ou seja, é concentrador de postagens, assim podemos acompanhar o desenvolvimento da linguagem por um unico canal, é inglês. https://www.r-bloggers.com/tag/rblogs/\nEm português há uma iniciativa no Twitter para agregar as postagens do blogs brasileiros cadastrados, https://twitter.com/rbloggersbr.\nHá também no facebook grupos sobre R, em português o principal deles é o R Brasil - Programadores. Como podemos ver temos varios canais para buscar informações sobre o R. Mas claro caso seja necessario o google está ai para nos ajudar também, para facilitar podemos buscar algo tipo “regressão linear r”, e variações.\nO próximo capítulo começamos aprofundar o que vimos por até aqui. Mas especificamente sobre dados, criar objetos, importação e etc."
  },
  {
    "objectID": "01-cap.html#footnotes",
    "href": "01-cap.html#footnotes",
    "title": "1  Básico",
    "section": "",
    "text": "Código aberto é uma expressão usada normalmente para se referir a programas com um tipo de licença que permite que qualquer pessoa os usem, modifiquem e compartilhem. O R um desses programas e, portanto, é gratuito.↩︎\nPara quem usa Linux, é possível instalar o R diretamente pelo terminal, usando o comando sudo apt-get install r-base, por exemplo.↩︎\nNo R, [] e {} são reservados para outros usos, como veremos em breve.↩︎\nEmbora ele também seja uma linguagem de programação.↩︎\nEm R, argumentos são os valores que uma função recebe para executar uma tarefa e, como veremos em seguida, há funções que recebem vários argumentos, alguns deles nomeados.↩︎\nHá funções que não recebem inputs, assim como outros que não retornam outputs, mas esses não são os usos mais comuns de funções.↩︎\nNa verdade, em R, vetores de inteiros são armazenados como numeric, o que você pode ver por conta própria rodando class(c(1, 2, 3)).↩︎\nNote que, para usar a função View() adequadamente, precisamos que o RStudio esteja instalado no computador.↩︎\nEnquanto escrevemos este livro, o CRAN se aproxima de 20 mil pacotes oficiais mantidos em seu website. Informação disponível em: https://cran.r-project.org/web/packages/.↩︎\nGitHub é uma plataforma de armazenamento e versionamento de software criado em cima do Git, um software de código aberto de controle de versões. Atualmente, o GitHub é um dos maiores repositórios de código aberto no mundo. Para acessá-lo, visite https://github.com.↩︎\nEstas e outras recomendações comuns para evitar erros podem ser vistas em: http://www.alex-singleton.com/R-Tutorial-Materials/common-error-msg.pdf (em inglês).↩︎"
  }
]